// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type CinemaPublic = {
  /**
   * Name of the cinema
   */
  name: string
  /**
   * Is this cinema a Cineville cinema?
   */
  cineville?: boolean
  /**
   * Background color for the cinema badge
   */
  badge_bg_color?: string | null
  /**
   * Text color for the cinema badge
   */
  badge_text_color?: string | null
  /**
   * URL for the cinema's website or page
   */
  url?: string | null
  /**
   * Unique identifier for the cinema
   */
  id: number
  /**
   * City where the cinema is located
   */
  city?: CityPublic
}

export type CityPublic = {
  /**
   * Name of the city
   */
  name: string
  /**
   * ID of the city
   */
  id: number
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type MovieCreate = {
  /**
   * TMDB ID of the movie
   */
  id: number
  /**
   * Title of the movie
   */
  title: string
  /**
   * Link to the movie poster
   */
  poster_link?: string | null
  /**
   * Letterboxd slug for the movie
   */
  letterboxd_slug?: string | null
}

export type MoviePublic = {
  /**
   * TMDB ID of the movie
   */
  id: number
  /**
   * Title of the movie
   */
  title: string
  /**
   * Link to the movie poster
   */
  poster_link?: string | null
  /**
   * Letterboxd slug for the movie
   */
  letterboxd_slug?: string | null
  /**
   * List of showtimes associated with the movie where friends are going
   */
  showtimes_with_friends?: Array<ShowtimeInMoviePublic>
  /**
   * List of showtimes associated with the movie without friends going
   */
  showtime_without_friends?: Array<ShowtimeInMoviePublic>
}

export type MovieSummaryPublic = {
  /**
   * TMDB ID of the movie
   */
  id: number
  /**
   * Title of the movie
   */
  title: string
  /**
   * Link to the movie poster
   */
  poster_link?: string | null
  /**
   * Letterboxd slug for the movie
   */
  letterboxd_slug?: string | null
  /**
   * List of showtimes associated with the movie
   */
  showtimes?: Array<ShowtimeInMoviePublic>
  /**
   * List of cinemas where the movie is showing
   */
  cinemas?: Array<CinemaPublic>
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  display_name: string
  is_verified?: boolean
}

export type ShowtimeCreate = {
  /**
   * Showtime ID
   */
  id?: number | null
  datetime: string
  /**
   * Theatre name
   */
  theatre?: string
  /**
   * Link to purchase tickets
   */
  ticket_link?: string | null
  /**
   * TMDB ID of the movie
   */
  movie_id: number
  /**
   * ID of the cinema
   */
  cinema_id: number
}

export type ShowtimeInMoviePublic = {
  /**
   * Showtime ID
   */
  id: number
  datetime: string
  /**
   * Theatre name
   */
  theatre?: string
  /**
   * Link to purchase tickets
   */
  ticket_link?: string | null
  /**
   * Cinema details where the showtime is held
   */
  cinema: CinemaPublic
  /**
   * List of friends going to this showtime
   */
  friends_going?: Array<UserPublic> | null
}

export type ShowtimePublic = {
  /**
   * Showtime ID
   */
  id: number
  datetime: string
  /**
   * Theatre name
   */
  theatre?: string
  /**
   * Link to purchase tickets
   */
  ticket_link?: string | null
  /**
   * Movie details associated with the showtime
   */
  movie: MoviePublic
  /**
   * Cinema details where the showtime is held
   */
  cinema: CinemaPublic
  /**
   * List of friends going to this showtime
   */
  friends_going?: Array<UserPublic> | null
}

export type Token = {
  access_token: string
  /**
   * Type of the token, usually 'bearer'
   */
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  /**
   * Indicates if the user is active
   */
  is_active?: boolean
  /**
   * Indicates if the user has superuser privileges
   */
  is_superuser?: boolean
  display_name?: string | null
  letterboxd_username?: string | null
  password: string
}

export type UserPublic = {
  email: string
  /**
   * Indicates if the user is active
   */
  is_active?: boolean
  /**
   * Indicates if the user has superuser privileges
   */
  is_superuser?: boolean
  display_name?: string | null
  letterboxd_username?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  display_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  /**
   * Indicates if the user is active
   */
  is_active?: boolean
  /**
   * Indicates if the user has superuser privileges
   */
  is_superuser?: boolean
  display_name?: string | null
  letterboxd_username?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  display_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type FriendsSendFriendRequestData = {
  receiverId: string
}

export type FriendsSendFriendRequestResponse = Message

export type FriendsAcceptFriendRequestData = {
  senderId: string
}

export type FriendsAcceptFriendRequestResponse = Message

export type FriendsDeclineFriendRequestData = {
  senderId: string
}

export type FriendsDeclineFriendRequestResponse = Message

export type FriendsCancelFriendRequestData = {
  receiverId: string
}

export type FriendsCancelFriendRequestResponse = Message

export type FriendsRemoveFriendData = {
  friendId: string
}

export type FriendsRemoveFriendResponse = Message

export type FriendsGetFriendsResponse = UsersPublic

export type FriendsGetSentFriendRequestsResponse = UsersPublic

export type FriendsGetReceivedFriendRequestsResponse = UsersPublic

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type MeGetCurrentUserResponse = UserPublic

export type MeDeleteUserMeResponse = Message

export type MeGetMyShowtimesResponse = Array<ShowtimePublic>

export type MeSyncWatchlistResponse = Message

export type MoviesCreateMovieData = {
  requestBody: MovieCreate
}

export type MoviesCreateMovieResponse = MoviePublic

export type MoviesReadMoviesData = {
  /**
   * Max number of items to return
   */
  limit?: number
  /**
   * Number of items to skip
   */
  offset?: number
  /**
   * Search query for movie titles, optional
   */
  query?: string | null
  /**
   * Max number of showtimes per movie
   */
  showtimeLimit?: number
  snapshotTime?: string
  /**
   * If true, only return movies that are in the user's watchlist
   */
  watchlistOnly?: boolean
}

export type MoviesReadMoviesResponse = Array<MovieSummaryPublic>

export type MoviesReadMovieData = {
  id: number
}

export type MoviesReadMovieResponse = MoviePublic

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type ShowtimesCreateShowtimeData = {
  requestBody: ShowtimeCreate
}

export type ShowtimesCreateShowtimeResponse = ShowtimePublic

export type ShowtimesGetAllShowtimesForMovieData = {
  movieId: number
}

export type ShowtimesGetAllShowtimesForMovieResponse =
  Array<ShowtimeInMoviePublic>

export type ShowtimesSelectShowtimeData = {
  showtimeId: number
}

export type ShowtimesSelectShowtimeResponse = unknown

export type ShowtimesDeleteShowtimeSelectionData = {
  showtimeId: number
}

export type ShowtimesDeleteShowtimeSelectionResponse = unknown

export type TestMyTestResponse = Message

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersSearchUsersData = {
  /**
   * Max number of items to return
   */
  limit?: number
  /**
   * Number of items to skip
   */
  offset?: number
  /**
   * Search query for usernames
   */
  query: string
}

export type UsersSearchUsersResponse = Array<UserPublic>

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
