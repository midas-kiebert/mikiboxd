// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  FriendsSendFriendRequestData,
  FriendsSendFriendRequestResponse,
  FriendsAcceptFriendRequestData,
  FriendsAcceptFriendRequestResponse,
  FriendsDeclineFriendRequestData,
  FriendsDeclineFriendRequestResponse,
  FriendsCancelFriendRequestData,
  FriendsCancelFriendRequestResponse,
  FriendsRemoveFriendData,
  FriendsRemoveFriendResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MeGetCurrentUserResponse,
  MeDeleteUserMeResponse,
  MeUpdateUserMeData,
  MeUpdateUserMeResponse,
  MeUpdatePasswordMeData,
  MeUpdatePasswordMeResponse,
  MeGetMyShowtimesData,
  MeGetMyShowtimesResponse,
  MeSyncWatchlistResponse,
  MeGetFriendsResponse,
  MeGetSentFriendRequestsResponse,
  MeGetReceivedFriendRequestsResponse,
  MoviesReadMoviesData,
  MoviesReadMoviesResponse,
  MoviesReadMovieData,
  MoviesReadMovieResponse,
  ShowtimesSelectShowtimeData,
  ShowtimesSelectShowtimeResponse,
  ShowtimesDeleteShowtimeSelectionData,
  ShowtimesDeleteShowtimeSelectionResponse,
  ShowtimesToggleShowtimeSelectionData,
  ShowtimesToggleShowtimeSelectionResponse,
  UsersSearchUsersData,
  UsersSearchUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersGetUserData,
  UsersGetUserResponse,
  UsersGetUserSelectedShowtimesData,
  UsersGetUserSelectedShowtimesResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class FriendsService {
  /**
   * Send Friend Request
   * @param data The data for the request.
   * @param data.receiverId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static sendFriendRequest(
    data: FriendsSendFriendRequestData,
  ): CancelablePromise<FriendsSendFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/request/{receiver_id}",
      path: {
        receiver_id: data.receiverId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Accept Friend Request
   * @param data The data for the request.
   * @param data.senderId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static acceptFriendRequest(
    data: FriendsAcceptFriendRequestData,
  ): CancelablePromise<FriendsAcceptFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/accept/{sender_id}",
      path: {
        sender_id: data.senderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Decline Friend Request
   * @param data The data for the request.
   * @param data.senderId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static declineFriendRequest(
    data: FriendsDeclineFriendRequestData,
  ): CancelablePromise<FriendsDeclineFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/decline/{sender_id}",
      path: {
        sender_id: data.senderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel Friend Request
   * @param data The data for the request.
   * @param data.receiverId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelFriendRequest(
    data: FriendsCancelFriendRequestData,
  ): CancelablePromise<FriendsCancelFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/friends/cancel/{receiver_id}",
      path: {
        receiver_id: data.receiverId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Friend
   * @param data The data for the request.
   * @param data.friendId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeFriend(
    data: FriendsRemoveFriendData,
  ): CancelablePromise<FriendsRemoveFriendResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/friends/{friend_id}",
      path: {
        friend_id: data.friendId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MeService {
  /**
   * Get Current User
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getCurrentUser(): CancelablePromise<MeGetCurrentUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/",
    })
  }

  /**
   * Delete User Me
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<MeDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/me/",
    })
  }

  /**
   * Update User Me
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: MeUpdateUserMeData,
  ): CancelablePromise<MeUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/me/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: MeUpdatePasswordMeData,
  ): CancelablePromise<MeUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get My Showtimes
   * @param data The data for the request.
   * @param data.snapshotTime
   * @param data.limit
   * @param data.offset
   * @returns ShowtimeLoggedIn Successful Response
   * @throws ApiError
   */
  public static getMyShowtimes(
    data: MeGetMyShowtimesData = {},
  ): CancelablePromise<MeGetMyShowtimesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/showtimes",
      query: {
        snapshot_time: data.snapshotTime,
        limit: data.limit,
        offset: data.offset,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Sync Watchlist
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static syncWatchlist(): CancelablePromise<MeSyncWatchlistResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/me/watchlist",
    })
  }

  /**
   * Get Friends
   * @returns UserWithFriendStatus Successful Response
   * @throws ApiError
   */
  public static getFriends(): CancelablePromise<MeGetFriendsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/friends",
    })
  }

  /**
   * Get Sent Friend Requests
   * @returns UserWithFriendStatus Successful Response
   * @throws ApiError
   */
  public static getSentFriendRequests(): CancelablePromise<MeGetSentFriendRequestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/requests/sent",
    })
  }

  /**
   * Get Received Friend Requests
   * @returns UserWithFriendStatus Successful Response
   * @throws ApiError
   */
  public static getReceivedFriendRequests(): CancelablePromise<MeGetReceivedFriendRequestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/requests/received",
    })
  }
}

export class MoviesService {
  /**
   * Read Movies
   * @param data The data for the request.
   * @param data.offset
   * @param data.limit
   * @param data.showtimeLimit
   * @param data.snapshotTime
   * @param data.query
   * @param data.watchlistOnly
   * @returns MovieSummaryLoggedIn Successful Response
   * @throws ApiError
   */
  public static readMovies(
    data: MoviesReadMoviesData = {},
  ): CancelablePromise<MoviesReadMoviesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/movies/",
      query: {
        offset: data.offset,
        limit: data.limit,
        showtime_limit: data.showtimeLimit,
        snapshot_time: data.snapshotTime,
        query: data.query,
        watchlist_only: data.watchlistOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Movie
   * @param data The data for the request.
   * @param data.id
   * @param data.snapshotTime
   * @returns MovieLoggedIn Successful Response
   * @throws ApiError
   */
  public static readMovie(
    data: MoviesReadMovieData,
  ): CancelablePromise<MoviesReadMovieResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/movies/{id}",
      path: {
        id: data.id,
      },
      query: {
        snapshot_time: data.snapshotTime,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ShowtimesService {
  /**
   * Select Showtime
   * @param data The data for the request.
   * @param data.showtimeId
   * @returns ShowtimeLoggedIn Successful Response
   * @throws ApiError
   */
  public static selectShowtime(
    data: ShowtimesSelectShowtimeData,
  ): CancelablePromise<ShowtimesSelectShowtimeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/showtimes/selection/{showtime_id}",
      path: {
        showtime_id: data.showtimeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Showtime Selection
   * @param data The data for the request.
   * @param data.showtimeId
   * @returns ShowtimeLoggedIn Successful Response
   * @throws ApiError
   */
  public static deleteShowtimeSelection(
    data: ShowtimesDeleteShowtimeSelectionData,
  ): CancelablePromise<ShowtimesDeleteShowtimeSelectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/showtimes/selection/{showtime_id}",
      path: {
        showtime_id: data.showtimeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Toggle Showtime Selection
   * @param data The data for the request.
   * @param data.showtimeId
   * @returns ShowtimeLoggedIn Successful Response
   * @throws ApiError
   */
  public static toggleShowtimeSelection(
    data: ShowtimesToggleShowtimeSelectionData,
  ): CancelablePromise<ShowtimesToggleShowtimeSelectionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/showtimes/selection/{showtime_id}",
      path: {
        showtime_id: data.showtimeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Search Users
   * @param data The data for the request.
   * @param data.query
   * @param data.offset
   * @param data.limit
   * @returns UserWithFriendStatus Successful Response
   * @throws ApiError
   */
  public static searchUsers(
    data: UsersSearchUsersData,
  ): CancelablePromise<UsersSearchUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/search",
      query: {
        query: data.query,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User
   * Get a user by their ID.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getUser(
    data: UsersGetUserData,
  ): CancelablePromise<UsersGetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Selected Showtimes
   * @param data The data for the request.
   * @param data.userId
   * @param data.snapshotTime
   * @param data.limit
   * @param data.offset
   * @returns ShowtimeLoggedIn Successful Response
   * @throws ApiError
   */
  public static getUserSelectedShowtimes(
    data: UsersGetUserSelectedShowtimesData,
  ): CancelablePromise<UsersGetUserSelectedShowtimesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/showtimes",
      path: {
        user_id: data.userId,
      },
      query: {
        snapshot_time: data.snapshotTime,
        limit: data.limit,
        offset: data.offset,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
