name: Test Backend

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Create .env file
        run: |
          cat > .env <<EOF
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          STACK_NAME=${{ secrets.STACK_NAME }}
          FRONTEND_HOST=${{ vars.FRONTEND_HOST }}
          DOMAIN=${{ vars.DOMAIN }}
          DOCKER_IMAGE_BACKEND=${{ vars.DOCKER_IMAGE_BACKEND }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ENVIRONMENT=${{ vars.ENVIRONMENT }}
          BACKEND_CORS_ORIGINS="http://localhost,http://localhost:5173,https://localhost,https://localhost:5173,http://localhost.tiangolo.com"
          FIRST_SUPERUSER=admin@example.com
          POSTGRES_SERVER=localhost
          POSTGRES_PORT=5432
          PROJECT_NAME="MikiBoxd"
          DOCKER_IMAGE_FRONTEND=frontend
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          SMTP_HOST=
          SMTP_USER=
          SMTP_PASSWORD=
          EMAILS_FROM_EMAIL=info@example.com
          SMTP_TLS=True
          SMTP_SSL=False
          SMTP_PORT=587
          SENTRY_DSN=
          DEBUG=False
          TMDB_KEY=${{ secrets.TMDB_KEY }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_USER_ID=${{ secrets.TELEGRAM_USER_ID }}
          ENABLE_TELEGRAM=false
          EOF
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.4.15"
          enable-cache: true
      - run: docker compose down -v --remove-orphans
      - run: docker compose up -d db mailcatcher
      - name: Migrate DB
        run: uv run bash scripts/prestart.sh
        working-directory: backend
      - name: Run tests
        run: uv run bash scripts/tests-start.sh "Coverage for ${{ github.sha }}"
        working-directory: backend
      - run: docker compose down -v --remove-orphans
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: backend/htmlcov
          include-hidden-files: true
