// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  FriendsSendFriendRequestData,
  FriendsSendFriendRequestResponse,
  FriendsAcceptFriendRequestData,
  FriendsAcceptFriendRequestResponse,
  FriendsDeclineFriendRequestData,
  FriendsDeclineFriendRequestResponse,
  FriendsCancelFriendRequestData,
  FriendsCancelFriendRequestResponse,
  FriendsRemoveFriendData,
  FriendsRemoveFriendResponse,
  FriendsGetFriendsResponse,
  FriendsGetSentFriendRequestsResponse,
  FriendsGetReceivedFriendRequestsResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  MeGetCurrentUserResponse,
  MeDeleteUserMeResponse,
  MeGetMyShowtimesResponse,
  MeSyncWatchlistResponse,
  MoviesCreateMovieData,
  MoviesCreateMovieResponse,
  MoviesReadMoviesData,
  MoviesReadMoviesResponse,
  MoviesReadMovieData,
  MoviesReadMovieResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  ShowtimesCreateShowtimeData,
  ShowtimesCreateShowtimeResponse,
  ShowtimesGetAllShowtimesForMovieData,
  ShowtimesGetAllShowtimesForMovieResponse,
  ShowtimesSelectShowtimeData,
  ShowtimesSelectShowtimeResponse,
  ShowtimesDeleteShowtimeSelectionData,
  ShowtimesDeleteShowtimeSelectionResponse,
  TestMyTestResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersSearchUsersData,
  UsersSearchUsersResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class FriendsService {
  /**
   * Send Friend Request
   * Send a friend request to another user.
   * @param data The data for the request.
   * @param data.receiverId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static sendFriendRequest(
    data: FriendsSendFriendRequestData,
  ): CancelablePromise<FriendsSendFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/request/{receiver_id}",
      path: {
        receiver_id: data.receiverId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Accept Friend Request
   * Accept a friend request from another user.
   * @param data The data for the request.
   * @param data.senderId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static acceptFriendRequest(
    data: FriendsAcceptFriendRequestData,
  ): CancelablePromise<FriendsAcceptFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/accept/{sender_id}",
      path: {
        sender_id: data.senderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Decline Friend Request
   * Decline a friend request from another user.
   * @param data The data for the request.
   * @param data.senderId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static declineFriendRequest(
    data: FriendsDeclineFriendRequestData,
  ): CancelablePromise<FriendsDeclineFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/friends/decline/{sender_id}",
      path: {
        sender_id: data.senderId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel Friend Request
   * Cancel a sent friend request.
   * @param data The data for the request.
   * @param data.receiverId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelFriendRequest(
    data: FriendsCancelFriendRequestData,
  ): CancelablePromise<FriendsCancelFriendRequestResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/friends/cancel/{receiver_id}",
      path: {
        receiver_id: data.receiverId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Friend
   * Remove a friend from your friend list.
   * @param data The data for the request.
   * @param data.friendId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeFriend(
    data: FriendsRemoveFriendData,
  ): CancelablePromise<FriendsRemoveFriendResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/friends/{friend_id}",
      path: {
        friend_id: data.friendId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Friends
   * Get the list of friends for the current user.
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static getFriends(): CancelablePromise<FriendsGetFriendsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/friends/",
    })
  }

  /**
   * Get Sent Friend Requests
   * Get the list of sent friend requests for the current user.
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static getSentFriendRequests(): CancelablePromise<FriendsGetSentFriendRequestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/friends/requests/sent",
    })
  }

  /**
   * Get Received Friend Requests
   * Get the list of received friend requests for the current user.
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static getReceivedFriendRequests(): CancelablePromise<FriendsGetReceivedFriendRequestsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/friends/requests/received",
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class MeService {
  /**
   * Get Current User
   * Get the current user's profile.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getCurrentUser(): CancelablePromise<MeGetCurrentUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<MeDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/me/",
    })
  }

  /**
   * Get My Showtimes
   * Get all showtimes selected by the current user.
   * @returns ShowtimePublic Successful Response
   * @throws ApiError
   */
  public static getMyShowtimes(): CancelablePromise<MeGetMyShowtimesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/me/showtimes",
    })
  }

  /**
   * Sync Watchlist
   * Sync the user's watchlist from Letterboxd.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static syncWatchlist(): CancelablePromise<MeSyncWatchlistResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/me/watchlist",
    })
  }
}

export class MoviesService {
  /**
   * Create Movie
   * Create a new movie.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MoviePublic Successful Response
   * @throws ApiError
   */
  public static createMovie(
    data: MoviesCreateMovieData,
  ): CancelablePromise<MoviesCreateMovieResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/movies/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Movies
   * @param data The data for the request.
   * @param data.offset Number of items to skip
   * @param data.limit Max number of items to return
   * @param data.showtimeLimit Max number of showtimes per movie
   * @param data.snapshotTime
   * @param data.query Search query for movie titles, optional
   * @param data.watchlistOnly If true, only return movies that are in the user's watchlist
   * @returns MovieSummaryPublic Successful Response
   * @throws ApiError
   */
  public static readMovies(
    data: MoviesReadMoviesData = {},
  ): CancelablePromise<MoviesReadMoviesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/movies/",
      query: {
        offset: data.offset,
        limit: data.limit,
        showtime_limit: data.showtimeLimit,
        snapshot_time: data.snapshotTime,
        query: data.query,
        watchlist_only: data.watchlistOnly,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Movie
   * Get movie by TMDB ID.
   * @param data The data for the request.
   * @param data.id
   * @returns MoviePublic Successful Response
   * @throws ApiError
   */
  public static readMovie(
    data: MoviesReadMovieData,
  ): CancelablePromise<MoviesReadMovieResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/movies/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ShowtimesService {
  /**
   * Create Showtime
   * Create a new movie.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ShowtimePublic Successful Response
   * @throws ApiError
   */
  public static createShowtime(
    data: ShowtimesCreateShowtimeData,
  ): CancelablePromise<ShowtimesCreateShowtimeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/showtimes/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get All Showtimes For Movie
   * @param data The data for the request.
   * @param data.movieId
   * @returns ShowtimeInMoviePublic Successful Response
   * @throws ApiError
   */
  public static getAllShowtimesForMovie(
    data: ShowtimesGetAllShowtimesForMovieData,
  ): CancelablePromise<ShowtimesGetAllShowtimesForMovieResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/showtimes/movie/{movie_id}",
      path: {
        movie_id: data.movieId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Select Showtime
   * Select a showtime for a user.
   * @param data The data for the request.
   * @param data.showtimeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static selectShowtime(
    data: ShowtimesSelectShowtimeData,
  ): CancelablePromise<ShowtimesSelectShowtimeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/showtimes/selection/{showtime_id}",
      path: {
        showtime_id: data.showtimeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Showtime Selection
   * Delete a user's selection for a showtime.
   * @param data The data for the request.
   * @param data.showtimeId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteShowtimeSelection(
    data: ShowtimesDeleteShowtimeSelectionData,
  ): CancelablePromise<ShowtimesDeleteShowtimeSelectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/showtimes/selection/{showtime_id}",
      path: {
        showtime_id: data.showtimeId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TestService {
  /**
   * My Test
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static myTest(): CancelablePromise<TestMyTestResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/test/my-test",
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Search Users
   * @param data The data for the request.
   * @param data.query Search query for usernames
   * @param data.offset Number of items to skip
   * @param data.limit Max number of items to return
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static searchUsers(
    data: UsersSearchUsersData,
  ): CancelablePromise<UsersSearchUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/search",
      query: {
        query: data.query,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
